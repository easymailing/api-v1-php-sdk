<?php
/**
 * CampaignCampaignCreate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easymailing API
 *
 * The Easymailing API is a set of REST APIs that enable you to programmatically manage Campaign, Audience, Suscribers, Stats and more.\\ The Easymailing API is organized around REST. Our API has predictable resource-oriented URLs and uses standard HTTP response codes, authentication, and verbs\\ This documents all the REST API methods, with example requests and responses. You can also load this into the Postman API Development Environment to interact with the API with your own Bearer tokens.\\ If there are other uses cases you'd like the API to support, please [contact us](https://ayuda.easymailing.com).
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CampaignCampaignCreate Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignCampaignCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Campaign-campaign:create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
'email_config' => 'AnyOfCampaignCampaignCreateEmailConfig',
'campaign_config' => 'AnyOfCampaignCampaignCreateCampaignConfig',
'template' => 'string',
'list_distribution' => 'string',
'list_segment' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
'email_config' => null,
'campaign_config' => null,
'template' => 'iri-reference',
'list_distribution' => 'iri-reference',
'list_segment' => 'iri-reference'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
'email_config' => 'email_config',
'campaign_config' => 'campaign_config',
'template' => 'template',
'list_distribution' => 'list_distribution',
'list_segment' => 'list_segment'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
'email_config' => 'setEmailConfig',
'campaign_config' => 'setCampaignConfig',
'template' => 'setTemplate',
'list_distribution' => 'setListDistribution',
'list_segment' => 'setListSegment'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
'email_config' => 'getEmailConfig',
'campaign_config' => 'getCampaignConfig',
'template' => 'getTemplate',
'list_distribution' => 'getListDistribution',
'list_segment' => 'getListSegment'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['email_config'] = isset($data['email_config']) ? $data['email_config'] : null;
        $this->container['campaign_config'] = isset($data['campaign_config']) ? $data['campaign_config'] : null;
        $this->container['template'] = isset($data['template']) ? $data['template'] : null;
        $this->container['list_distribution'] = isset($data['list_distribution']) ? $data['list_distribution'] : null;
        $this->container['list_segment'] = isset($data['list_segment']) ? $data['list_segment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Campaign title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets email_config
     *
     * @return AnyOfCampaignCampaignCreateEmailConfig
     */
    public function getEmailConfig()
    {
        return $this->container['email_config'];
    }

    /**
     * Sets email_config
     *
     * @param AnyOfCampaignCampaignCreateEmailConfig $email_config email_config
     *
     * @return $this
     */
    public function setEmailConfig($email_config)
    {
        $this->container['email_config'] = $email_config;

        return $this;
    }

    /**
     * Gets campaign_config
     *
     * @return AnyOfCampaignCampaignCreateCampaignConfig
     */
    public function getCampaignConfig()
    {
        return $this->container['campaign_config'];
    }

    /**
     * Sets campaign_config
     *
     * @param AnyOfCampaignCampaignCreateCampaignConfig $campaign_config campaign_config
     *
     * @return $this
     */
    public function setCampaignConfig($campaign_config)
    {
        $this->container['campaign_config'] = $campaign_config;

        return $this;
    }

    /**
     * Gets template
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param string $template Template
     *
     * @return $this
     */
    public function setTemplate($template)
    {
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets list_distribution
     *
     * @return string
     */
    public function getListDistribution()
    {
        return $this->container['list_distribution'];
    }

    /**
     * Sets list_distribution
     *
     * @param string $list_distribution The audience to send the campaign
     *
     * @return $this
     */
    public function setListDistribution($list_distribution)
    {
        $this->container['list_distribution'] = $list_distribution;

        return $this;
    }

    /**
     * Gets list_segment
     *
     * @return string
     */
    public function getListSegment()
    {
        return $this->container['list_segment'];
    }

    /**
     * Sets list_segment
     *
     * @param string $list_segment List segment
     *
     * @return $this
     */
    public function setListSegment($list_segment)
    {
        $this->container['list_segment'] = $list_segment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
