<?php
/**
 * CampaignConfigSendJsonldCampaignRead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Easymailing API
 *
 * The Easymailing API is a set of REST APIs that enable you to programmatically manage Campaign, Audience, Suscribers, Stats and more.\\ The Easymailing API is organized around REST. Our API has predictable resource-oriented URLs and uses standard HTTP response codes, authentication, and verbs\\ This documents all the REST API methods, with example requests and responses. You can also load this into the Postman API Development Environment to interact with the API with your own Bearer tokens.\\ If there are other uses cases you'd like the API to support, please [contact us](https://ayuda.easymailing.com).
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: unset
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CampaignConfigSendJsonldCampaignRead Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CampaignConfigSendJsonldCampaignRead implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CampaignConfigSend:jsonld-campaign:read';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'context' => 'string',
'id' => 'string',
'type' => 'string',
'schedule_mailling' => 'bool',
'schedule_mailling_date' => '\DateTime',
'send_confirmation_email' => 'bool',
'mailing_confirm_emails' => '\Swagger\Client\Model\OneOfCampaignConfigSendJsonldCampaignReadMailingConfirmEmailsItems[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'context' => null,
'id' => null,
'type' => null,
'schedule_mailling' => null,
'schedule_mailling_date' => 'date-time',
'send_confirmation_email' => null,
'mailing_confirm_emails' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'context' => '@context',
'id' => '@id',
'type' => '@type',
'schedule_mailling' => 'schedule_mailling',
'schedule_mailling_date' => 'schedule_mailling_date',
'send_confirmation_email' => 'send_confirmation_email',
'mailing_confirm_emails' => 'mailing_confirm_emails'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'context' => 'setContext',
'id' => 'setId',
'type' => 'setType',
'schedule_mailling' => 'setScheduleMailling',
'schedule_mailling_date' => 'setScheduleMaillingDate',
'send_confirmation_email' => 'setSendConfirmationEmail',
'mailing_confirm_emails' => 'setMailingConfirmEmails'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'context' => 'getContext',
'id' => 'getId',
'type' => 'getType',
'schedule_mailling' => 'getScheduleMailling',
'schedule_mailling_date' => 'getScheduleMaillingDate',
'send_confirmation_email' => 'getSendConfirmationEmail',
'mailing_confirm_emails' => 'getMailingConfirmEmails'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['context'] = isset($data['context']) ? $data['context'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['schedule_mailling'] = isset($data['schedule_mailling']) ? $data['schedule_mailling'] : null;
        $this->container['schedule_mailling_date'] = isset($data['schedule_mailling_date']) ? $data['schedule_mailling_date'] : null;
        $this->container['send_confirmation_email'] = isset($data['send_confirmation_email']) ? $data['send_confirmation_email'] : null;
        $this->container['mailing_confirm_emails'] = isset($data['mailing_confirm_emails']) ? $data['mailing_confirm_emails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets context
     *
     * @return string
     */
    public function getContext()
    {
        return $this->container['context'];
    }

    /**
     * Sets context
     *
     * @param string $context context
     *
     * @return $this
     */
    public function setContext($context)
    {
        $this->container['context'] = $context;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets schedule_mailling
     *
     * @return bool
     */
    public function getScheduleMailling()
    {
        return $this->container['schedule_mailling'];
    }

    /**
     * Sets schedule_mailling
     *
     * @param bool $schedule_mailling Schedule the campaign
     *
     * @return $this
     */
    public function setScheduleMailling($schedule_mailling)
    {
        $this->container['schedule_mailling'] = $schedule_mailling;

        return $this;
    }

    /**
     * Gets schedule_mailling_date
     *
     * @return \DateTime
     */
    public function getScheduleMaillingDate()
    {
        return $this->container['schedule_mailling_date'];
    }

    /**
     * Sets schedule_mailling_date
     *
     * @param \DateTime $schedule_mailling_date Schedule date to send the campaign
     *
     * @return $this
     */
    public function setScheduleMaillingDate($schedule_mailling_date)
    {
        $this->container['schedule_mailling_date'] = $schedule_mailling_date;

        return $this;
    }

    /**
     * Gets send_confirmation_email
     *
     * @return bool
     */
    public function getSendConfirmationEmail()
    {
        return $this->container['send_confirmation_email'];
    }

    /**
     * Sets send_confirmation_email
     *
     * @param bool $send_confirmation_email Send a confirmation email when the campaign get sent
     *
     * @return $this
     */
    public function setSendConfirmationEmail($send_confirmation_email)
    {
        $this->container['send_confirmation_email'] = $send_confirmation_email;

        return $this;
    }

    /**
     * Gets mailing_confirm_emails
     *
     * @return \Swagger\Client\Model\OneOfCampaignConfigSendJsonldCampaignReadMailingConfirmEmailsItems[]
     */
    public function getMailingConfirmEmails()
    {
        return $this->container['mailing_confirm_emails'];
    }

    /**
     * Sets mailing_confirm_emails
     *
     * @param \Swagger\Client\Model\OneOfCampaignConfigSendJsonldCampaignReadMailingConfirmEmailsItems[] $mailing_confirm_emails Emails to send the confirmation
     *
     * @return $this
     */
    public function setMailingConfirmEmails($mailing_confirm_emails)
    {
        $this->container['mailing_confirm_emails'] = $mailing_confirm_emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
